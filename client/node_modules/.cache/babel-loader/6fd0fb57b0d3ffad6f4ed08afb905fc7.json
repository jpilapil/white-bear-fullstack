{"ast":null,"code":"import actions from \"../actions\";\nexport default function queue(queue = {}, action) {\n  // initial state, action\n  let newQueue = { ...queue\n  }; // create copy of queue, never mutate original state!\n\n  switch (action.type) {\n    case actions.STORE_QUEUED_CARDS:\n      // if action is type of STORE_QUEUED_CARDS, run\n      newQueue.cards = action.payload;\n      return newQueue;\n    // new state\n\n    case actions.INCREMENT_QUEUE_INDEX:\n      // if action is type of INCREMENT_QUEUE_INDEX, increase index\n      newQueue.index += 1;\n      return newQueue;\n    // new state\n\n    case actions.DECREMENT_QUEUE_INDEX:\n      // if action is type of DECREMENT_QUEUE_INDEX, decrease index\n      newQueue.index -= 1;\n      return newQueue;\n    // new state\n\n    case actions.RESET_QUEUE:\n      newQueue.cards = [];\n      newQueue.index = 0;\n      return newQueue;\n\n    default:\n      // else, return initial state\n      return queue;\n  }\n}","map":{"version":3,"sources":["/Users/justin/code/white-bear-fullstack/client/src/store/reducers/queue.js"],"names":["actions","queue","action","newQueue","type","STORE_QUEUED_CARDS","cards","payload","INCREMENT_QUEUE_INDEX","index","DECREMENT_QUEUE_INDEX","RESET_QUEUE"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,YAApB;AAEA,eAAe,SAASC,KAAT,CAAeA,KAAK,GAAG,EAAvB,EAA2BC,MAA3B,EAAmC;AAChD;AACA,MAAIC,QAAQ,GAAG,EAAE,GAAGF;AAAL,GAAf,CAFgD,CAEnB;;AAC7B,UAAQC,MAAM,CAACE,IAAf;AACE,SAAKJ,OAAO,CAACK,kBAAb;AAAiC;AAC/BF,MAAAA,QAAQ,CAACG,KAAT,GAAiBJ,MAAM,CAACK,OAAxB;AACA,aAAOJ,QAAP;AAAiB;;AACnB,SAAKH,OAAO,CAACQ,qBAAb;AAAoC;AAClCL,MAAAA,QAAQ,CAACM,KAAT,IAAkB,CAAlB;AACA,aAAON,QAAP;AAAiB;;AACnB,SAAKH,OAAO,CAACU,qBAAb;AAAoC;AAClCP,MAAAA,QAAQ,CAACM,KAAT,IAAkB,CAAlB;AACA,aAAON,QAAP;AAAiB;;AACnB,SAAKH,OAAO,CAACW,WAAb;AACER,MAAAA,QAAQ,CAACG,KAAT,GAAiB,EAAjB;AACAH,MAAAA,QAAQ,CAACM,KAAT,GAAiB,CAAjB;AACA,aAAON,QAAP;;AACF;AACE;AACA,aAAOF,KAAP;AAhBJ;AAkBD","sourcesContent":["import actions from \"../actions\";\n\nexport default function queue(queue = {}, action) {\n  // initial state, action\n  let newQueue = { ...queue }; // create copy of queue, never mutate original state!\n  switch (action.type) {\n    case actions.STORE_QUEUED_CARDS: // if action is type of STORE_QUEUED_CARDS, run\n      newQueue.cards = action.payload;\n      return newQueue; // new state\n    case actions.INCREMENT_QUEUE_INDEX: // if action is type of INCREMENT_QUEUE_INDEX, increase index\n      newQueue.index += 1;\n      return newQueue; // new state\n    case actions.DECREMENT_QUEUE_INDEX: // if action is type of DECREMENT_QUEUE_INDEX, decrease index\n      newQueue.index -= 1;\n      return newQueue; // new state\n    case actions.RESET_QUEUE:\n      newQueue.cards = [];\n      newQueue.index = 0;\n      return newQueue;\n    default:\n      // else, return initial state\n      return queue;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}